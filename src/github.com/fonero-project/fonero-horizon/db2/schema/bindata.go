// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x6d\x6f\xe3\x36\x12\xfe\x9e\x5f\x41\xf4\x8b\x6d\xc0\x0e\xe2\xec\xda\x49\x1c\x74\x01\x37\x51\x6f\x8d\x3a\x4e\x1b\x3b\xb7\x5d\x1c\x0e\x02\x2d\xd1\xb6\x6e\x65\x51\x15\xa9\x6c\xd2\xc3\xfd\xf7\x1b\xbd\x59\x6f\xa4\x28\xd9\x4a\xdb\x2f\x6d\xcc\xe1\xc3\xe7\x19\xbe\xcc\x0c\xa9\x0e\x06\x67\x83\x01\xfa\x95\x32\xbe\xf5\xc8\xf2\xb7\x39\x32\x31\xc7\x6b\xcc\x08\x32\xfd\xbd\x0b\x6d\x67\x41\xfb\x3d\xfc\x37\x31\xd1\xc6\xa3\xfb\xd4\xe0\x85\x78\xcc\xa2\x0e\xba\x39\x1f\x9f\x5f\x66\xac\xd6\x6f\xc8\xdd\xea\x41\xf7\x82\xc9\xd9\x52\x5b\x21\xc6\x31\x27\x7b\xe2\x70\x9d\x5b\x7b\x42\x7d\x8e\x7e\x44\x17\xb7\x61\x93\x4d\x8d\x6f\xe5\x5f\x0d\xdb\x0a\xac\x89\x63\x50\xd3\x72\xb6\xd0\xd0\x79\x5e\xfd\x7c\xdd\xb9\x4d\xe0\x1c\x13\x7b\xa6\x6e\x50\x67\x43\xbd\x3d\x58\xe8\x8c\x7b\xf0\x2f\x06\x96\xd4\x89\x31\x76\x04\xa0\x37\xbe\x63\x70\xa0\xa3\xaf\x01\x89\x04\xed\x1b\x6c\x33\x92\x1b\x06\x00\xf4\x3d\x61\x0c\x6f\x43\x83\xef\xd8\x73\x00\xeb\x36\xe6\x4e\xb0\x67\xec\x74\x17\xf3\x1d\xb4\xb9\xfe\xda\xb6\x8c\x7e\x20\xd6\x00\x9f\xd8\x34\x31\x33\xc9\x06\xfb\x36\x08\xc4\x6b\x9b\x30\x17\x1b\x24\x20\xdd\x29\xb4\x7e\xb7\xf8\x4e\xa7\x96\x99\xe1\x71\x16\xcd\xc6\x02\xef\xc9\x04\x6d\xa9\xe7\x02\x9d\xad\x87\x03\xce\xec\x16\xad\xde\x5c\xf8\x79\x35\xfd\x69\xae\xdd\xa2\x25\x48\xda\xe3\x49\x4c\xe2\x16\x3d\x7e\x77\x88\x37\x41\x83\x70\xc6\xee\x9e\xb4\xe9\x4a\x8b\x4c\x8b\x38\xa8\x7b\x86\xe0\x1f\xcb\x44\x9c\xbc\x72\xb4\x78\x5c\xa1\xc5\xf3\x7c\xde\x0f\x7f\xc5\xae\x0b\x6e\x30\x75\xcc\x51\x30\x0f\xe0\x5c\x98\xc4\x80\x68\xf8\x27\xfa\x93\x3a\xe4\xac\x07\x3c\x73\x44\x77\x16\xe3\xd4\x7b\xd3\xb1\x61\x50\xdf\xe1\x4c\xb7\x4c\x9d\x91\x3f\x12\xc2\x4b\xed\xb7\x67\x6d\x71\x57\x93\x73\x62\x2d\x43\x0d\x69\x2e\x57\xd3\xa7\x15\xfa\x32\x5b\x7d\x46\xc3\xf0\x87\xd9\x02\xba\x3f\x68\x8b\x15\xfa\xe9\x6b\xfc\xd3\xe2\x11\x3d\xcc\x16\xff\x9c\xce\x9f\xb5\xc3\xdf\xd3\xdf\xd3\xbf\xef\xa6\x77\x9f\x35\x34\x54\x89\x39\xda\xed\x45\xa0\xd4\xef\x6b\x6b\x6b\x39\x1c\xdd\x6b\x3f\x4f\x9f\xe7\x2b\xe4\xc0\x34\xbc\x60\xbb\xdb\x91\x28\xee\x4c\x26\x1e\xd9\x1a\x36\x66\xac\x57\x9c\x2e\xd3\xf4\x60\xad\xc2\xf2\xc6\x1e\x36\x38\xf1\xd0\x0b\xf6\xde\x60\xbd\x76\xc7\x1f\x7b\xf2\x89\x22\x9b\x0d\x31\x5a\x90\x16\xe3\xc4\xca\x0a\xf4\xf5\x54\x69\x9e\x74\x62\x47\x5d\x12\x2d\x49\xa9\xe5\x0f\xd4\x33\x89\xf7\x03\x82\x16\xb2\x05\x71\xf9\x56\x0e\xe4\x25\x4d\x26\xe1\xd8\xb2\x19\xfa\x0f\xa3\xce\x5a\xee\x07\x9b\x98\xd0\xf7\x74\x3f\xc4\x38\xb1\x1f\x60\xca\x7c\x38\xac\x64\xdc\x22\x63\x7d\x87\xd9\x4e\x3c\x6f\x05\x7b\xd7\x23\x2f\x16\xf5\x99\xae\xec\x18\xbb\xc5\xc3\x0e\xc3\xd1\x39\x17\x4e\xc4\x81\x47\xb2\xe0\x2e\x0a\x23\xa4\x13\x51\xcf\xde\xb0\x29\x13\x9d\x11\xc1\xa9\x7d\x38\x26\x8a\x7d\x3c\x02\xc7\xbe\xaa\x53\x64\xeb\xbb\x66\x6d\xdb\xc3\xd2\x89\xff\xdc\xbb\xd4\x03\xb7\xe8\x49\xe0\x29\x6a\x19\x16\x17\x11\x85\x83\x1b\x74\x5b\x70\x30\x0a\xd7\xe0\x86\x10\xdd\xa5\xd4\x16\xb7\x06\x71\x50\x07\x13\xc9\x5c\x87\xcd\xb0\x43\x89\xf7\x22\x33\xd9\xe3\x57\x9d\xbf\xc2\x3e\xe7\x3a\xb3\xfe\x94\x59\xb9\x1e\xe5\xd4\xa0\xb6\x54\x57\x3a\x47\xf2\xe5\x9e\xce\xb3\x8b\x3d\x6e\x19\x96\x8b\xdb\x38\xe0\xc4\xb0\xe9\x71\x27\x56\x54\xff\x14\x50\x9f\x2b\x4d\x25\xb7\x1b\xa0\x2a\xc7\xf8\xab\xc2\x55\x23\xa1\xe8\xf1\xcb\x42\xbb\x87\xb1\x15\x8a\xa7\xf3\x95\xf6\xd4\x50\xf0\x01\x5b\x61\x7e\x6e\x99\x4a\x2d\x2d\xae\xcd\x72\xf8\x2d\x9c\x03\x99\x53\x53\x66\x13\x26\x47\x46\x24\x25\x8c\x4c\x27\x06\xa6\xe8\x27\x46\x7d\xcf\x20\xc9\xea\x96\x84\x84\x64\x9b\x77\x20\x19\x28\x59\xd4\xd8\x07\x20\xcf\x24\xa7\xbb\x33\x82\x29\xc4\xfb\x53\xe3\x38\x85\x2c\xc2\x93\xf6\x65\xc4\xb6\x2b\x9a\xd7\xfe\x5b\x55\x67\x6a\x43\x18\x61\xc1\xe1\x1a\x4e\x4a\x9d\x78\x9b\xe9\x63\x31\xe6\x83\x6d\xb9\xd7\x68\x5c\xd1\x0b\xca\x14\xd1\x48\xc3\x4b\x71\x9f\x7d\x38\xed\x62\x71\xd4\xdf\xee\x78\x53\x01\xb9\x5e\x0d\x24\xe4\xfa\xd5\x16\x91\xf4\xaa\x90\x71\xf7\xb8\x58\xae\x9e\xa6\x33\x38\xee\xf2\x0b\x49\xcf\x75\xd6\xc3\x22\x0d\xc1\x31\x77\xf7\x0b\xea\x76\xf3\xc0\x9f\xd0\x45\xaf\xa7\x82\xcb\x38\xb4\x00\x96\x75\x75\x08\x55\xb9\x55\x0e\x27\x41\xab\x71\x52\x06\x5c\x37\x52\xd6\x39\xa2\x4e\x89\x95\x32\x7e\xed\x46\x4b\xc5\x28\x7f\x55\xbc\x6c\x28\xf6\xc4\x88\xa9\x18\xad\x1c\x33\x65\x1d\x2a\xa2\x66\xa6\x4b\xab\x6b\x35\x59\x9f\x59\x4a\xb5\x8b\x97\xb8\x66\x51\x94\x44\x75\x03\x6b\x75\x8c\x14\xda\xa6\x43\xcb\xb3\x7b\x2c\xdd\x7a\xb2\xca\xe8\x6f\xa9\x6d\xa0\x4a\x20\xce\x0b\xb1\x81\x94\xe8\xea\x06\x9a\xa1\xd2\xf0\x6d\x2e\x69\xdc\x43\xea\x21\x69\x0a\xbc\x20\x6b\x66\xd6\xd6\xc1\xdc\x07\x68\x81\xdb\x6f\xc6\xbd\x7f\xfd\x3b\x4d\x4e\xfe\xfb\x3f\x51\x7a\x02\x16\x85\x92\x87\xec\xa9\x24\x9c\xa5\x58\x0e\xb8\xa1\x32\xd9\x49\xb1\xca\x30\xb1\x32\x70\x67\x10\x62\x1c\x93\x05\x33\x77\x0d\x0b\x78\x5b\x71\x7d\x25\xa9\x63\x60\xc7\xc5\xbb\x29\xe6\x56\xeb\x08\x88\xb6\xd3\xe3\x62\xae\xca\x83\x51\x64\x7f\xf7\x38\x7f\x7e\x58\x04\x53\x1e\x5c\x11\x4a\xaf\x86\x2a\x53\xef\xec\x45\x51\xd3\x73\xaf\x3d\x99\xd2\x11\x1a\x09\x55\x9c\x98\x62\xa9\xf7\x18\xd6\xf0\x86\x7a\x35\x2e\x50\xd1\xfd\x74\x35\x55\x48\x9c\x2d\x96\x1a\xc4\x21\x48\x34\x1e\x4b\x97\xa8\x61\xa0\x59\xa2\x6e\x67\xa8\x5b\x8e\xc5\x2d\x6c\xeb\x2c\xc4\x3a\x67\x7f\xd8\x9d\x3e\xea\x5c\x5e\x0c\xaf\x06\x17\x57\x83\xcb\x31\x1a\x8e\x26\xa3\xeb\xc9\xe5\xe8\xfc\xc3\x78\x3c\x1e\x5d\x0f\x2e\x46\x1d\x20\x5d\x0b\xfd\x12\xd0\x4d\xf2\x9a\x77\xc1\x1a\xdc\x43\x2d\xb3\x7a\xa4\x9b\xd1\xf8\xa6\xc9\x48\x1f\x74\x9f\x91\xc3\x69\x09\xc3\xea\xc5\xeb\xc8\xca\xf1\xae\x86\x57\x57\x1f\x9b\x8c\xf7\x51\xc7\xa6\xa9\x17\xef\x35\xaa\xc7\xb8\xba\x18\x35\xd2\x34\xd2\xa3\xa3\x39\xc9\x0f\xc3\xfb\xf8\xca\x21\xae\x87\xa3\x9b\x44\x86\x64\x55\x55\x5e\x10\xd7\x59\x56\x47\x5d\x9e\x07\xbb\x45\x81\xbb\xd4\xe6\xda\xdd\x2a\xf3\x1a\x71\x0e\x89\x7c\xe5\xc5\x72\x1f\x0d\xfb\xd1\xd3\x83\x5a\xae\xe8\xce\xb8\x89\x5a\x09\xac\xe8\x0a\xb6\x05\xd8\x1a\x57\x5d\xc7\x4f\x55\xb3\xbb\x96\x36\x26\xae\xfa\xd8\x6f\x32\x8d\x92\xbb\x95\x16\x5c\x2e\xb8\x62\x68\x07\x55\x5d\x8d\x1d\x3f\x95\x4d\xcb\x80\x36\x26\x53\x15\xda\x9a\x4c\xa7\x34\xe9\x6f\xee\x92\xe2\x29\x5a\xf8\x5b\x77\xbf\x91\xb7\x64\x88\xb4\x04\x6f\x9a\x25\x14\x50\xc3\x3c\x6d\x7a\x7f\x9f\x2d\xea\x45\x03\xa3\x5f\x9f\x66\x0f\xd3\xa7\xaf\xe8\x17\xed\x2b\xea\x5a\x66\xd3\x24\x4e\xb1\x91\xda\xd1\x56\x3d\x88\x48\x6a\x0d\x5a\xb5\x95\x4b\xf3\x2e\xe5\xba\x6b\x57\xbd\x6c\x98\x2a\xfd\x95\xd4\x94\x1e\x58\x1f\x22\x5b\xa2\x62\xb6\xb8\xd7\x7e\xaf\x57\xf7\x86\xa6\x19\x08\x10\x23\xae\x82\x9f\x97\xb3\xc5\x3f\xd0\x9a\x7b\x84\xa0\x6e\x6c\xdc\x2f\x95\x99\x22\x72\x41\xb5\x7c\x0a\xb3\xb0\xda\xae\x45\xab\x58\xa3\x8b\xd8\x44\x11\xf7\x14\x3e\x11\x42\x3d\x46\x85\x0b\x80\x7e\xb9\xd6\x17\x2e\x68\x9d\x04\x59\x6e\xd8\x7e\x04\xd3\xe7\xc5\x0c\xce\xeb\x98\x70\x01\x2e\x4b\x3b\x79\xbf\xce\x31\x16\x5d\x6b\xf7\x93\x2b\x6c\x19\xd9\xb4\x7a\x3a\x91\x26\xd4\x45\x75\x09\xa6\x77\x7c\x7d\xe1\x5d\xbc\x82\x34\x75\x75\xb7\x2d\xde\x31\x56\x96\xba\xe4\x20\x3e\x4a\x89\x58\x00\x7f\x6d\x4f\x40\x8c\x25\x59\xd3\x47\x4a\xc8\x5f\xd8\x96\x45\x80\xd7\x82\xdd\x4d\x8f\xd2\x10\x93\x4f\x31\x8e\x75\x7e\xb5\xa3\x0f\x9f\x1d\xc0\x28\x2d\xf8\x3a\x0f\x97\xa5\x9c\x7c\x43\x91\xe3\x28\x66\x94\xf5\x6b\x5b\xb4\x4a\x98\xf5\x8e\x37\x11\x41\x1e\x4d\x09\x3f\x65\x5a\x53\x8c\xe3\x97\xa4\x6a\xf9\xf1\x70\x16\xa2\x67\x96\x13\x98\x66\x50\x0a\x5c\x83\xa7\xc2\x1c\xb3\xd2\x7b\x56\xbf\xfc\xe8\xd4\x17\xbd\x5f\xc9\xc8\x07\xcf\x3a\xa7\x52\x0f\x30\x54\xc4\x0b\xef\x88\xfd\xe2\x73\x5f\xbf\xfc\x6a\x28\xa2\x6c\x86\x51\x28\x78\xee\x3c\x85\x74\x8a\xa2\xa2\x9d\xbc\xac\x8a\xb9\xb8\x2d\x6c\x9c\x18\x47\x45\xa4\x59\x78\x8a\xae\xbc\x4a\x97\x16\xd0\x2b\xfe\xde\xed\x54\xda\xca\x01\xb2\x7a\x0e\xdf\xef\xe5\x13\xc0\xc8\xb0\x01\xf7\xd3\xbd\x5d\x85\xad\x66\x2c\x58\x06\x79\xc0\x38\xd9\x08\xf0\x82\x45\x7e\xf4\x12\xad\x44\x55\x66\x37\x81\x91\x82\x68\x1c\x2a\x02\xc8\xc3\xa7\x68\x2d\xb1\x15\x41\x2b\xa3\xd4\xc1\xb2\x3e\xef\xb6\x17\x43\x0e\xfa\x98\xb0\x2a\x87\x2b\x7c\x51\xd7\xbe\xa3\x4b\xdf\xec\x29\xe9\x17\x3a\xd4\x17\x93\xf9\x84\xf2\xdd\xfc\x9f\xfd\x4c\x53\xa5\x24\x63\x5b\x5f\x84\xe8\x83\xd0\x77\x53\x23\xfc\xfa\x54\x25\x4b\xd4\xa9\xbe\xbe\xa4\x56\x7c\x37\x4d\x87\x27\x61\x95\x0e\x69\x51\x9f\x87\x4e\xef\x54\xdf\x63\x6b\x17\xd1\x85\x79\x7e\xd3\x0d\x9e\x07\xcd\x67\x8a\x2d\xed\xf0\xaa\x21\xea\x68\x50\xa4\xaf\x95\x83\xb5\x17\xbe\xca\xc0\xb5\xb8\xab\x83\x58\xb6\xa6\x78\x8f\x65\x53\xc6\x3f\xba\xa2\x09\x33\xba\x43\x20\x4f\x2e\x52\x20\xe7\xa7\xdf\x8e\xf6\x72\x05\xa6\x32\x45\xe8\x76\x93\xcf\x28\x07\x9f\x3e\xa1\x4e\x21\x39\xef\x4c\x26\xc1\x67\x0c\xbd\x5e\x1f\xc9\x0d\x83\xa4\xbd\x96\x61\x94\xcc\xcb\x4d\x4b\x25\x4d\x4d\xd3\x6a\x02\x82\x12\xe8\x60\xdc\x43\x5f\x3e\x6b\x4f\x5a\xb4\xc8\xd0\x8f\xe8\xc3\x87\xcc\x84\xc9\xfe\x3f\x2e\x64\xd0\xbd\x6b\x13\x4e\xc2\x99\xf8\x7f\x00\x00\x00\xff\xff\x45\x14\xa8\x0a\xf4\x35\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 13812, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\xbd\x35\x11\xf4\xd0\x6b\x73\x72\x9d\xad\x1a\xc9\xb1\xc1\x59\x03\x3d\x45\x51\x62\x15\x4b\x25\x81\x38\xfc\xbd\x3d\x56\x29\x3f\x52\x05\x48\xf8\x36\xa3\xb1\xbf\xf1\xee\x7c\x0e\x67\x77\x7e\x37\x36\x93\x03\x7b\xcf\x84\x41\x4e\x08\x15\x5e\x5a\x54\x02\xe1\xd6\x87\x69\x18\x5f\xeb\xa6\x6d\x87\xc7\x7e\x0a\xb5\xef\xea\xe0\x1e\x18\xc4\x53\x11\x37\x04\xd7\x05\x6d\x60\x71\x30\x0a\x15\xaf\x97\xa8\x08\x56\xdb\xa3\xa5\x34\x94\x85\xba\xe2\xd2\xe2\xa7\xe6\x37\x5f\x5a\x70\xb1\x41\x58\x64\xac\x42\x89\x82\x20\xb8\xe9\xa9\xd9\x27\xb3\x1f\xb8\xb3\x73\x48\x8e\xc9\xf8\x4c\xe2\xbb\x14\xd6\x46\x97\x27\x35\xd3\x34\x63\x5c\x12\x1a\x20\xbe\x92\x08\x5a\xc9\xed\x49\x08\xde\x13\x42\x4b\x5b\x2a\xf0\x5d\xfc\x35\x41\x8e\x6b\x6e\x25\x41\xef\x5e\x7e\x6f\xb2\x5c\x8e\x6e\xd7\xee\x9b\x10\x22\x8b\x7d\x1f\x63\x3e\x3c\xf7\xff\xa0\xe7\x46\x5f\x7c\xe0\x33\x76\x50\x7f\xad\x21\x63\x6f\x01\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x87\xf1\xfd\x9e\xe2\xbf\x4b\xc1\xbd\x53\xf4\xea\x74\x26\x52\x92\xc1\xa9\x88\x86\x1a\xa8\xb9\x92\x06\xc5\xb7\xb7\xa3\x8b\x38\x7f\x1f\xfc\x9a\x06\x9b\x47\x1a\xcb\xa5\x46\x84\x99\x8c\xf8\xae\x87\x37\x3b\xe9\xe0\xac\x9c\x71\x4f\x4b\xd5\xf2\x1e\xa6\x78\x1b\x63\x59\x40\x80\x61\xc6\xde\x49\x38\x5a\xcc\x45\xab\x5e\x75\x1a\x9e\x6b\x4b\x9a\x91\x72\x8d\xeb\x07\xee\x0e\x26\x88\xc7\x16\xd6\x79\xd8\x20\xd2\x12\x7d\x5b\xac\xaf\xfc\x5f\xe3\xde\x9d\x7e\x59\x2d\x7d\x02\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x51\x6b\xfa\x30\x14\xc5\xdf\xfb\x29\x2e\x3e\x55\xfe\x15\xfe\x1b\x9b\x2f\xc2\xc0\x69\xd9\x64\x52\x37\x67\x61\x6f\x25\x6d\xae\x6d\x40\x9b\x92\xa4\x1b\xfd\xf6\x4b\xdc\x0a\xb1\x8d\x3a\xfb\x54\x7a\xef\x39\x37\xa7\xf7\x47\x46\x23\xf8\xb7\x67\xb9\x20\x0a\x21\xae\xbc\xd9\x3a\x9c\x6e\x42\xd8\x4c\x1f\x97\x21\x14\x4c\x2a\x2e\x9a\x44\x09\x42\x51\x82\xef\x81\x7e\xda\x8f\xbc\x42\x2d\x62\xbc\x4c\x18\x85\x94\xe5\xac\x54\x10\xad\x36\x10\xc5\xcb\x65\x70\xe8\x1c\x70\x41\x51\x0c\x40\x57\x30\x47\x61\x55\x0f\x65\xbe\xdd\xa2\x70\x8a\x0f\x65\x89\xbb\xdd\x89\xba\x29\xa7\x75\x73\x56\xcd\x77\x34\x21\x52\xa2\x4a\x54\x53\x21\x64\x05\x11\x24\x53\xfa\x14\x9f\x44\x34\xac\xcc\xfd\xf1\xdd\xb0\x63\x69\x69\x98\x94\xb5\xee\xed\xab\xee\xc7\x67\x54\x19\xa7\xae\x49\x37\xb7\x6e\xcd\x9e\xd7\xfa\xe0\x9d\xf3\xc3\xec\x39\x9c\xbd\x80\x6f\xb7\x3c\xc0\xff\xe1\x6f\xae\x94\xd7\x79\xa1\xae\x4d\x76\xa4\xba\x22\xdb\x91\xee\xcf\xe9\x5a\xd5\xd9\x7c\xc7\x4d\x26\xa1\x37\x9c\x78\x2d\x7f\x71\xb4\x78\x8b\x43\x58\x44\xf3\xf0\x03\x0a\x25\x68\x52\xe9\x55\xaf\xa2\x2e\x92\xf1\xfb\x22\x7a\x82\x54\x09\x44\xf0\x5d\x64\x06\x2d\x85\x96\xb9\xe5\x9a\xea\x6e\x83\xe1\x25\xeb\x96\x55\x97\x8b\x31\x31\xdb\xba\xe4\xd1\x41\x32\xe8\x92\x13\xf4\x01\x3c\x35\xee\xe7\xe7\x5d\x1a\xd8\x63\x25\xe8\x2f\x34\x70\xb1\x61\xc6\xda\xf7\xc2\x9c\x7f\x95\xde\x7c\xbd\x7a\x75\xdf\x0b\x19\x91\x99\x7e\x99\x78\xdf\x01\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(13631999), modTime: time.Unix(1541658929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

